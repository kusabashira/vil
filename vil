#!/bin/sh
set -eu
version='0.2.0'

usage() {
  cat <<__USAGE__
Usage: ${0##*/} [OPTION]... {script-only-if-no-other-script} [input-file]...
Edit text with Vim script.

Options:
  -n, --quiet, --silent
                 suppress automatic printing of buffer
  -e script, --expression=script
                 add the script to the commands to be executed
  -f script-file, --file=script-file
                 add the contents of script-file to the commands to be executed
  --help
                 display this help and exit
  --version
                 output version information and exit
__USAGE__
}

version() {
  echo "$version"
}

warn() {
  echo "${0##*/}: $*"
}

script="$(mktemp "/tmp/${0##*/}.tmp.XXXXXX")"
src="$(mktemp "/tmp/${0##*/}.tmp.XXXXXX")"
atexit() {
	rm -f -- "$script" "$src"
}
trap 'atexit' EXIT
trap 'trap - EXIT; atexit; exit -1' INT PIPE TERM

require_print=1
require_program=1
while [ "$#" -gt 0 ]; do
  case "$1" in
    --help)
      usage >&2
      exit 0
      ;;
    --version)
      version >&2
      exit 0
      ;;
    -n|--quiet|--silent)
      require_print=0
      ;;
    -n*)
      require_print=0
      next="-${1#-n}"
      shift
      set -- "$next" "$@"
      continue
      ;;
    -e|--expression)
      require_program=0
      if [ "$#" -lt 2 ]; then
        warn "option requires an argument -- '${1##*-}'" >&2
        exit 2
      fi
      printf "%s\n" "$2" >> "$script"
      shift
      ;;
    -e*)
      require_program=0
      printf "%s\n" "${1#-e}" >> "$script"
      ;;
    --expression=*)
      require_program=0
      printf "%s\n" "${1#--expression=}" >> "$script"
      ;;
    -f|--file)
      require_program=0
      if [ "$#" -lt 2 ]; then
        warn "option requires an argument -- '${1##*-}'" >&2
        exit 2
      fi
      cat -- "$2" >> "$script"
      shift
      ;;
    -f*)
      require_program=0
      cat -- "${1#-f}" >> "$script"
      ;;
    --file=*)
      require_program=0
      cat -- "${1#--file=}" >> "$script"
      ;;
    --)
      shift
      break
      ;;
    -*)
      warn "unrecognized option '$1'" >&2
      exit 2
      ;;
    *)
      break
      ;;
  esac
  shift
done
if [ "$require_program" -eq 1 ]; then
  if [ "$#" -lt 1 ]; then
    usage >&2
    exit 2
  fi
  printf "%s\n" "$1" >> "$script"
  shift
fi
if [ "$require_print" -eq 1 ]; then
  echo "%print" >> "$script"
fi
echo "exit" >> "$script"

cat -- "$@" > "$src"
vim -u NONE -i NONE -N -n -e -s -S "$script" -- "$src"
exit 0
